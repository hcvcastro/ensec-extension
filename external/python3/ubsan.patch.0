--- Modules/_ctypes/libffi/src/x86/ffi64.c
+++ Modules/_ctypes/libffi/src/x86/ffi64.c
@@ -545,11 +545,15 @@
   tramp = (volatile unsigned short *) &closure->tramp[0];
 
   tramp[0] = 0xbb49;		/* mov <code>, %r11	*/
-  *((unsigned long long * volatile) &tramp[1])
-    = (unsigned long) ffi_closure_unix64;
+  tramp[1] = (unsigned long) ffi_closure_unix64;
+  tramp[2] = ((unsigned long) ffi_closure_unix64) >> 16;
+  tramp[3] = ((unsigned long) ffi_closure_unix64) >> 32;
+  tramp[4] = ((unsigned long) ffi_closure_unix64) >> 48;
   tramp[5] = 0xba49;		/* mov <data>, %r10	*/
-  *((unsigned long long * volatile) &tramp[6])
-    = (unsigned long) codeloc;
+  tramp[6] = (unsigned long) codeloc;
+  tramp[7] = ((unsigned long) codeloc) >> 16;
+  tramp[8] = ((unsigned long) codeloc) >> 32;
+  tramp[9] = ((unsigned long) codeloc) >> 48;
 
   /* Set the carry bit iff the function uses any sse registers.
      This is clc or stc, together with the first byte of the jmp.  */
--- Objects/listobject.c
+++ Objects/listobject.c
@@ -2036,7 +2036,7 @@
     if (keys != NULL) {
         for (i = 0; i < saved_ob_size; i++)
             Py_DECREF(keys[i]);
-        if (keys != &ms.temparray[saved_ob_size+1])
+        if (keys != ((char *) ms.temparray) + (saved_ob_size+1) * sizeof (PyObject *))
             PyMem_FREE(keys);
     }
 
--- Objects/longobject.c
+++ Objects/longobject.c
@@ -36,7 +36,7 @@
 static PyObject *
 get_small_int(sdigit ival)
 {
-    PyObject *v = (PyObject*)(small_ints + ival + NSMALLNEGINTS);
+    PyObject *v = (PyObject*)(small_ints + (ival + NSMALLNEGINTS));
     Py_INCREF(v);
 #ifdef COUNT_ALLOCS
     if (ival >= 0)
